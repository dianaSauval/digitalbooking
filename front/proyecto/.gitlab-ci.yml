variables:
  REPOSITORY_NAME: remo-digitalbooking-repo-prod
  TEAM: remo
  APP: front

# cache:
#   paths:
#     - front/proyecto/node_modules

stages:
  - build
  - package
  - test
  - deploy

build frontend:
  stage: build
  image: node:16-alpine
  script:
    - cd front/proyecto
    - npm install --force
    - npm test
    - CI=false npm run build # Investigar 'CI=false'
    - echo $PARENT_PIPELINE_ID > build/version.html
  artifacts:
    paths:
      - front/proyecto/build

build docker image:
  stage: package
  image:
    name: amazon/aws-cli
    entrypoint: [""]
  services:
    - docker:dind
  before_script:
    - amazon-linux-extras install docker
    - aws --version
    - docker --version
  script:
    - aws ecr get-login-password | docker login --username AWS --password-stdin $AWS_ECR_REGISTRY
    - docker build -t $AWS_ECR_REGISTRY/$REPOSITORY_NAME:$TEAM-$APP-latest -t $AWS_ECR_REGISTRY/$REPOSITORY_NAME:$TEAM-$APP-$PARENT_PIPELINE_ID --cache-from $AWS_ECR_REGISTRY/$REPOSITORY_NAME:$TEAM-$APP-latest front/proyecto
    - docker image ls
    - docker push --all-tags $AWS_ECR_REGISTRY/$REPOSITORY_NAME
    - echo $PARENT_PIPELINE_ID
    - |
      curl --location --request PUT --header "PRIVATE-TOKEN: $GITLAB_PERSONAL_ACCESS_TOKEN" \
      --silent --output /dev/null --show-error --fail \
      "https://gl.deitech.online/api/v4/projects/$CI_PROJECT_ID/variables/FRONTEND_VERSION" --form "value=`echo $PARENT_PIPELINE_ID`"
  variables:
    DOCKER_DRIVER: overlay

test docker image:
  stage: test
  image: curlimages/curl
  services:
    - name: $AWS_ECR_REGISTRY/$REPOSITORY_NAME:$TEAM-$APP-$FRONTEND_VERSION
      alias: frontend
  # before_script:
  #   - apt-get install -y curl
  #   - apt-get install -y grep
  script:
    - curl http://frontend/version.html | grep $FRONTEND_VERSION
