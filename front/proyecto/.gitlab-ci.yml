variables: 
  DOCKER_REGISTRY: 145504712931.dkr.ecr.us-west-2.amazonaws.com
  REPOSITORY_NAME: digitalbooking
  TEAM: remo
  APP: front

image: docker:latest
services:
  - docker:dind

before_script:
  - apk add --no-cache curl jq python2 py-pip
  - pip install awscli
  - $(aws ecr get-login --no-include-email --region us-west-2)


cache:
  paths:
    - front/proyecto/node_modules

stages:
  - test
  - build
  - package
  - test package
  - deploy

test project:
  stage: test
  image: node:16-alpine
  script:
    - cd front/proyecto
    - npm install
    - npm test

build project:
  stage: build
  image: node:16-alpine
  script:
    - cd front/proyecto
    - CI=false npm run build
    - echo $CI_PIPELINE_IID > build/version.html
  artifacts:    
    paths:      
      - front/proyecto/build

build docker image:
    stage: package
    image:
      name: amazon/aws-cli
      entrypoint: [""]
    services:
      - docker:dind
    before_script:
      - amazon-linux-extras install docker
      - aws --version
      - docker --version
    script:
      - aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin $DOCKER_REGISTRY
      - docker build -t $DOCKER_REGISTRY/$REPOSITORY_NAME:$TEAM-$APP-latest -t $DOCKER_REGISTRY/$REPOSITORY_NAME:$TEAM-$APP-$CI_PIPELINE_IID front/proyecto
      - docker image ls
      - docker push --all-tags $DOCKER_REGISTRY/$REPOSITORY_NAME

test docker image:
  stage: test package
  image: curlimages/curl
  services:
    - name: $DOCKER_REGISTRY/$REPOSITORY_NAME:$TEAM-$APP-$CI_PIPELINE_IID
      alias: frontend
  script:
    - curl http://frontend/version.html | grep $CI_PIPELINE_IID


# build docker image:
#   stage: docker
#   image: adoptopenjdk/openjdk11:alpine-jre
#   script:
#     - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
#     - docker build -t $CI_REGISTRY_IMAGE -t $CI_REGISTRY_IMAGE:$APP_VERSION ./back/digitalbooking/ # The first tag points to our latest image
#     - docker image ls
#     - docker push --all-tags $CI_REGISTRY_IMAGE


# .npm_build:  
#   image: node:10  
#   script:   
#     - npm install # Install all dependencies    
#     - npm build # yarn build:${APP_ENV} # Build command  
#   artifacts:    
#     paths:      
#       - ./build
#   only:    
#     refs:      
#       - main

# yarn_dev:  
#   extends: .yarn_build  
#   stage: build  
#   before_script:    
#     - export APP_ENV="dev"  
#   only:    
#     refs:      
#       - develop

# yarn_prod:  
#   extends: .yarn_build  
#   stage: build  
#   before_script:    
#     - export APP_ENV="prod"  
#   only:    
#     refs:      
#       - master