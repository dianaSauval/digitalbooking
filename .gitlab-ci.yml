include: cancel_pipeline_functions.yml

variables:
  APP_VERSION: $CI_PIPELINE_IID
  REPOSITORY_NAME: remo-digitalbooking-repo-prod
  TEAM: remo
  LOCK: deployment
  APP_NAME: remo-digitalbooking-prod
  APP_ENV_NAME: remo-digitalbooking-env-prod

stages:
  - update
  - cancel if update
  - provision
  - build
  - deploy
  - redeploy

update token:
  stage: update
  image:
    name: amazon/aws-cli
    entrypoint: [""]
  before_script:
    - aws --version
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - USER=AWS
    - TOKEN=$(aws ecr get-login-password --region us-west-1)
    - AUTH=$(echo "$USER:$TOKEN" | base64 | tr -d "\n")
    - |
      curl --location --request PUT --header "PRIVATE-TOKEN: $GITLAB_PERSONAL_ACCESS_TOKEN" \
      --silent --output /dev/null --show-error --fail \
      "https://gl.deitech.online/api/v4/projects/$CI_PROJECT_ID/variables/AWS_ECR_AUTH" --form "value=$AUTH"

avoid remaining:
  stage: cancel if update
  extends: .cancel_pipeline_template
  script:
    - echo "This job will cancel the pipeline"
    - cancel_pipeline
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"

infrastructure:
  stage: provision
  trigger:
    include: infra/.gitlab-ci.yml
    strategy: depend
  rules:
    - if: $CI_PIPELINE_SOURCE != "schedule" && ($CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_BRANCH == "develop")
      when: always
      changes:
        - infra/*
    - if: $CI_PIPELINE_SOURCE != "schedule"
      when: manual
      changes:
        - infra/*
      allow_failure: true

frontend:
  stage: build
  trigger:
    include: front/proyecto/.gitlab-ci.yml
    strategy: depend
  rules:
    - changes:
        - front/**/**
      if: $CI_PIPELINE_SOURCE != "schedule" && ($CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_BRANCH == "develop")
        when: always
      if: $CI_PIPELINE_SOURCE != "schedule"
        when: manual
        allow_failure: true
  variables:
    PARENT_PIPELINE_ID: $APP_VERSION

backend:
  stage: build
  trigger:
    include: back/digitalbooking/.gitlab-ci.yml
    strategy: depend
  rules:
    - if: $CI_PIPELINE_SOURCE != "schedule" && ($CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_BRANCH == "develop")
      when: always
      changes:
        # - back/*
        # - back/digitalbooking/src/main/java/com/grupo8/digitalbooking/*
        # - back/digitalbooking/src/main/java/com/grupo8/digitalbooking/util/*
        - back/**/**
    - if: $CI_PIPELINE_SOURCE != "schedule"
      when: manual
      changes:
        # - back/*
        # - back/digitalbooking/src/main/java/com/grupo8/digitalbooking/util/*
        # - back/digitalbooking/src/main/java/com/grupo8/digitalbooking/*
        - back/**/**
      allow_failure: true
  variables:
    PARENT_PIPELINE_ID: $APP_VERSION

deploy to production:
  stage: deploy
  image:
    name: amazon/aws-cli:2.4.11
    entrypoint: [""]
  variables:
    APP_NAME: remo-digitalbooking-prod
    APP_ENV_NAME: remo-digitalbooking-env-prod
  environment: production
  resource_group: ${LOCK}
  before_script:
    - aws --version
    - yum install -y gettext
    - yum install -y zip
    - yum install -y grep
  script:
    - envsubst < eb-templates/docker-compose.yml > docker-compose.yml
    - envsubst < eb-templates/Dockerrun.aws.json > Dockerrun.aws.json
    - envsubst < eb-templates/.dockercfg > .dockercfg
    - cat docker-compose.yml
    - cat Dockerrun.aws.json
    - cat .dockercfg
    - zip remo-digitalbooking-eb-app-dev-$APP_VERSION.zip docker-compose.yml Dockerrun.aws.json
    - aws s3 cp .dockercfg s3://$AWS_S3_BUCKET/remo/digitalbooking/dev/.dockercfg
    - aws s3 cp remo-digitalbooking-eb-app-dev-$APP_VERSION.zip s3://$AWS_S3_BUCKET/remo/digitalbooking/dev/remo-digitalbooking-eb-app-dev-$APP_VERSION.zip
    - aws elasticbeanstalk create-application-version --application-name $APP_NAME --version-label $APP_VERSION --source-bundle S3Bucket=$AWS_S3_BUCKET,S3Key=remo/digitalbooking/dev/remo-digitalbooking-eb-app-dev-$APP_VERSION.zip
    - aws elasticbeanstalk update-environment --application-name $APP_NAME --version-label $APP_VERSION --environment-name $APP_ENV_NAME
    - aws elasticbeanstalk wait environment-updated --application-name $APP_NAME --version-label $APP_VERSION --environment-name $APP_ENV_NAME
  rules:
    - if: $CI_PIPELINE_SOURCE != "schedule" && ($CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_BRANCH == "develop")
      changes:
        - front/proyecto/*
        - back/digitalbooking/*
      when: always
    - if: $CI_PIPELINE_SOURCE != "schedule"
      changes:
        - front/proyecto/*
        - back/digitalbooking/*
      when: manual

save succeded version:
  stage: redeploy
  when: on_success
  script:
    - |
      curl --location --request PUT --header "PRIVATE-TOKEN: $GITLAB_PERSONAL_ACCESS_TOKEN" \
      --silent --output /dev/null --show-error --fail \
      "https://gl.deitech.online/api/v4/projects/$CI_PROJECT_ID/variables/VERSION_OK" --form "value=$APP_VERSION"
  rules:
    - changes:
        - front/proyecto/*
        - back/digitalbooking/*

redeploy if failure:
  image:
    name: amazon/aws-cli:2.4.11
    entrypoint: [""]
  stage: redeploy
  when: on_failure
  script:
    - aws elasticbeanstalk update-environment --application-name $APP_NAME --version-label $VERSION_OK --environment-name $APP_ENV_NAME
  rules:
    - when: manual
    - changes:
        - front/proyecto/*
        - back/digitalbooking/*
